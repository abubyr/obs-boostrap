#!/bin/bash
UBUNTU_NONSTANDARD_REPO="false"
OBS_SRV_URL=$OBS_DEST
OBS_USER="Admin"
OBS_PASS="opensuse"
REPO_TYPE="RPM"
ARCH="x86_64"
UBUNTU_DISTRO="precise"
UBUNTU_REPO_COMPONENT="main"
while getopts ":u:p:t:n:a:d:c:hA:X" FLAG; do
	case $FLAG in
		u)
			REPO_URL=$OPTARG
			;;
		t)
			REPO_TYPE=$OPTARG
			;;
		p)
			PROJECT=$OPTARG
			;;
		a)
			ARCH=$OPTARG
			;;
		n)
			REPO_NAME=$OPTARG
			;;
		d)
			UBUNTU_DISTRO=$OPTARG
			;;
		c)
			UBUNTU_REPO_COMPONENT=$OPTARG
			;;
		A)
			OBS_SRV_URL=$OPTARG
			;;
		U)
			OBS_USER=$OPTARG
			;;
		P)
			OBS_PASS=$OPTARG
			;;
		X)
			UBUNTU_NONSTANDARD_REPO="true"
			;;
		\?)
			echo "Invalid option: -$OPTARG. Use -h for help" >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
		h)
			echo -e "This script connects package repositories (RPM and DEB repos are supported) to OBS projects (so-called target, external, internal projects, which doesn't contain any OBS packages and used as dependency projects for other ones.\n\nUsage: $(basename $0) [-A <obs_url>] -u <source_repo_url> -p <obs_project> -n <repository_name> [-t <repo_type>=RPM] [-a <arch>=x86_64] \
[-d <ubuntu_distro>=precise] [-c <ubuntu_repo_component>=main]\n\n \
-u <source_repo_url> 		- Mandatory. URL of repository project connected to. Needed for downloading repo index files.\n \
-p <obs_project>     		- Mandatory. Name of OBS project for linking (activating).\n \
-n <repository_name> 		- Mandatory. Desired name of OBS project's repository.\n \
[-A <obs_url>]			- Optional. Target OBS server API URL. Default value: OBS_DEST env variable.\n \
[-U <obs_user>]		- Optional. OBS API admin user. Default value: Admin.\n \
[-P <obs_password>]		- Optional. OBS API admin user password. Default value: opensuse\n \
[-t <repo_type>]     		- Optional. deb or rpm repository type. Default value: RPM.\n \
[-a <arch>]          		- Optional. Repository architecture. Default value: x86_64.\n \
-X				- Optional. UBUNTU ONLY. If set, nonstandard Ubuntu repo (without dists/pool directories) is assumed.\n \
				  In this case <source_repo_url> should point to directory with Packages.gz file.\n \
[-d <ubuntu_distro>=precise]	- Optional. UBUNTU ONLY: Ubuntu distribution (code name). Default value: precise.\n \
[-c <ubuntu_repo_component>=main]-Optional. UBUNTU ONLY: Ubuntu repo component, e.g. main, universe, multiverse etc. Default value: main."
				
			exit
			;;
	esac
done
shift $((OPTIND-1))

if [[ -z "$REPO_URL" || -z "$PROJECT" || -z "$REPO_NAME" ]]; then
	echo "Invalid usage. <repo_url>, <obs-project> and <repository_name> arguments are mandatory. Use -h fo help."
	exit 1
fi
if [[ -z "$OBS_SRV_URL" ]]; then
	echo "Invalid usage. Specify OBS API URL! Use -h fo help."
	exit 1
fi

case "$REPO_TYPE" in
	"RPM"|"rpm")
		INDEX_TYPE="primary.xml.gz"
		# determine exact path to primary.xml.gz file in repodata
		INDEX_URL="${REPO_URL%/}/repodata/$(curl ${REPO_URL%/}/repodata/ | grep -o '[0-9a-hA-H-]*primary\.xml\.gz' | uniq)"
		UNZIPPER="gunzip"
		;;
	"DEB"|"deb")
		INDEX_TYPE="Packages.gz"
		DIST="precise"
		if [[ "$UBUNTU_NONSTANDARD_REPO" == "false" ]]; then
			INDEX_URL="${REPO_URL%/}/dists/$UBUNTU_DISTRO/$UBUNTU_REPO_COMPONENT/binary-$(echo $ARCH | sed 's|^x86_64$|amd64|;s|^x86$|i386|')/$INDEX_TYPE"
		else
			INDEX_URL=$REPO_URL/$INDEX_TYPE
		fi
		UNZIPPER="gunzip"
		;;
	*)
		echo "Invalid package_type. Should be either RPM or DEB"
		exit 1
		;;
esac
# add credentials to OBS server API if absent
if ! grep -q $OBS_SRV_URL $HOME/.oscrc; then cat > $HOME/.oscrc <<OSCRCEOF
[general]
[$OBS_SRV_URL]
user = $OBS_USER
pass = $OBS_PASS
OSCRCEOF
fi
OBS_IP=${OBS_SRV_URL#*//}
OBS_IP=${OBS_IP%/*}
OBS_PORT=${OBS_IP##*:}
OBS_IP=${OBS_IP%:*}
[[ -z "$OBS_PORT" ]] && OBS_PORT='443'
# automatically trust to OBS server certificate if not made yet
if [ ! -f $HOME/.config/osc/trusted-certs/$OBS_IP_$OBS_PORT.* ]; then
	echo 2 | osc -A $OBS_SRV_URL ls > /dev/null 2>&1
fi
# create target/external project on destination OBS
if ! osc -A $OBS_SRV_URL meta prj -F - $PROJECT <<EOF
<project name="$PROJECT">
  <title/>
  <description/>
  <person userid="Admin" role="bugowner"/>
  <person userid="Admin" role="maintainer"/>
  <download baseurl="$REPO_URL" metafile="${INDEX_TYPE%.*}" mtype="$(echo $REPO_TYPE | tr '[:upper:]' '[:lower:]')md" arch="$ARCH"/>
  <repository name="$REPO_NAME">
    <arch>$ARCH</arch>
  </repository>
</project>
EOF
then

	echo "Project wasn't created. Exitting..."
	exit 1
fi
if [[ ! -d /srv/obs/build/$PROJECT/$REPO_NAME/$ARCH/:full ]]; then
	if ! mkdir -p /srv/obs/build/$PROJECT/$REPO_NAME/$ARCH/:full; then echo ":full directory for project $PROJECT wasn't created. Exitting..."; exit 2; fi
else
	rm -rf /srv/obs/build/$PROJECT/$REPO_NAME/$ARCH/:full/*
fi
[[ -e /srv/obs/build/$PROJECT/$REPO_NAME/$ARCH/:full.solv ]] && rm -f /srv/obs/build/$PROJECT/$REPO_NAME/$ARCH/:full.solv
wget -O "/srv/obs/build/$PROJECT/$REPO_NAME/$ARCH/:full/$INDEX_TYPE" $INDEX_URL
$UNZIPPER "/srv/obs/build/$PROJECT/$REPO_NAME/$ARCH/:full/$INDEX_TYPE"
chown -R obsrun:obsrun "/srv/obs/build/$PROJECT"
obs_admin --rescan-repository $PROJECT $REPO_NAME $ARCH
