#!/bin/bash -x
# ENV variables:
# OBS_SOURCE   - OBS server API URL to copy from (source)
# OBS_DEST     - OBS server API URL to copy to (destination)
# PRJ - project for copy
# PKG_LIST - list of packages to copy from project PRJ on OBS_SOURCE server
# for copying all packages, set
# PKG_LIST=$(osc -A $OBS_SOURCE ls $PRJ)
OBS_DST=$OBS_DEST
OBS_SRC=$OBS_SOURCE
PRJ=$PROJECT
PACKAGE_LIST=$PKG_LIST
OBS_DST_USER="Admin"
OBS_DST_PASS="opensuse"
OBS_SRC_USER="Admin"
OBS_SRC_PASS="opensuse"
add_obs_credentials()
{
	if [ "$#" -ne 3 ]; then
		echo "Invalid usage of $(basename $0) function! Function requires exactly 3 arguments: obs_url, obs_user, obs_password"
		exit 1
	fi
	local OBS_URL=$1
	local USER=$2
	local PASS=$3
	if ! grep -q $OBS_URL $HOME/.oscrc; then 
		if ! grep -q "\[general\]" $HOME/.oscrc; then echo "[general]" >> $HOME/.oscrc; fi 
		cat >> $HOME/.oscrc <<OSCRCEOF
[$OBS_URL]
user = $USER
pass = $PASS
OSCRCEOF
	fi
	local OBS_URL_IP=${OBS_URL#*//}
	local OBS_URL_IP=${OBS_URL_IP%/*}
	local OBS_URL_PORT=${OBS_URL_IP##*:}
	local OBS_URL_IP=${OBS_URL_IP%:*}
	[[ -z "$OBS_URL_PORT" ]] && OBS_URL_PORT='443'
	# automatically trust to OBS server certificate if not made yet
	if [ ! -f $HOME/.config/osc/trusted-certs/"$OBS_URL_IP"_"$OBS_URL_PORT".* ]; then
		echo 2 | osc -A $OBS_URL ls > /dev/null 2>&1
	fi
}
while getopts ":s:d:t:l:U:P:u:p:h" FLAG; do
	case $FLAG in
		s)
			OBS_SRC=$OPTARG
			;;
		d)
			OBS_DST=$OPTARG
			;;
		t)
			PRJ=$OPTARG
			;;
		l)
			PACKAGE_LIST="$OPTARG"
			;;
		U)
			OBS_SRC_USER=$OPTARG
			;;
		u)
			OBS_DST_USER=$OPTARG
			;;
		P)
			OBS_SRC_PASS=$OPTARG
			;;
		p)
			OBS_DST_PASS=$OPTARG
			;;
		\?)
			echo "Invalid option: -$OPTARG. Use -h for help" >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
		h)
			echo -e "This script is intended to copy projects from source OBS server to destination one. You can copy either all OBS packages contained in specified project or only part of them.\n\nUsage: $(basename $0) [-s <source_obs_url>] [-d <dest_obs_url>] [-t <obs_project>] [-l <package_list>] [-U <obs_src_user>] [-P <obs_src_password>] [-u <obs_dst_user>] [-p <obs_dst_password>]\n\n\
[-s <source_obs_url]		- Optional. Source OBS server API URL. Default value: env variable OBS_SOURCE\n\
[-d <dest_obs_url]		- Optional. Destination OBS server API URL. Default value: env variable OBS_DEST\n\
[-t <obs_project>]     		- Optional. Project to copy. Default value: env variable PROJECT.\n\
[-l <package_list>]		- Optional. List of OBS packages to copy from project. Default value: env variable PKG_LIST.\n\
				  For copying all packages from project, specify PKG_LIST=\$(osc -A \$OBS_SOURCE ls \$PROJECT) or pass derived list as script argument.\n\
[-U <obs_src_user>]		- Optional. OBS API admin user for source OBS . Default value: Admin.\n\
[-P <obs_src_password>]		- Optional. OBS API admin user password for source OBS. Default value: opensuse\n\
[-u <obs_dst_user>]		- Optional. OBS API admin user for destination OBS. Default value: Admin.\n\
[-p <obs_dst_password>]		- Optional. OBS API admin user password for destination OBS. Default value: opensuse."
			exit
			;;
	esac
done
shift $((OPTIND-1))

if [[ -z "$OBS_SRC" || -z "$OBS_DST" || -z "$PRJ" || -z "$PACKAGE_LIST" ]]; then
	echo -e "Invalid usage. Set up environment variables or pass arguments to script via CLI. See help (-h) for more information."
	exit 1
fi
add_obs_credentials $OBS_SRC $OBS_SRC_USER $OBS_SRC_PASS
add_obs_credentials $OBS_DST $OBS_DST_USER $OBS_DST_PASS
echo -e "######################################\n
Link to source OBS (OBS_SRC) = $OBS_SRC. Link to destination OBS (OBS_DST) = $OBS_DST. Project to copy (PRJ) = $PRJ\n
######################################\n"

# Uncomment this and comment out underlying if statement if you need to copy also project's meta from source OBS instead of creating it manually
# WARNING: project won't be created in this case if there is no some project on destination OBS server which mentioned in meta as dependency
#echo "Copying project $PRJ ..."
#osc -A $OBS_SRC meta prj $PRJ > $PRJ.prj
#if ! osc -A $OBS_DST meta prj -F $PRJ.prj $PRJ; then 
#	echo "Project wasn't created. Exitting..."
#	rm -f $PRJ.prj
#	exit 1
#fi

# create project on destination OBS 
echo "Creating project $PRJ with empty meta..."
if ! osc -A $OBS_DST meta prj -F - $PRJ <<EOF
<project name="$PRJ">
  <title/>
  <description/>
  <person userid="Admin" role="bugowner"/>
  <person userid="Admin" role="maintainer"/>
</project>
EOF
then
	echo "Project wasn't created. Exitting..."
	rm -f $PRJ.prjconf
	exit 1
fi
osc -A $OBS_SRC meta prjconf $PRJ > $PRJ.prjconf
osc -A $OBS_DST meta prjconf -F $PRJ.prjconf $PRJ
# remove temporary files with project configs
rm -f $PRJ.{prj,prjconf}
# copy packages from one project to another using osc copypac command
for pkg in $PACKAGE_LIST; do
	echo "Copying package $pkg from project $PRJ"
	osc -A $OBS_SRC copypac -t $OBS_DST $PRJ $pkg $PRJ
	# copy package metadata
	osc -A $OBS_SRC meta pkg $PRJ $pkg > $pkg.pkg
	# set up pkg meta
	osc -A $OBS_DST meta pkg -F $pkg.pkg $PRJ $pkg
	# clean temporary file
	rm -f $pkg.pkg
done
